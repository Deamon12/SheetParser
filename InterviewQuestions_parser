function getRichTextFromSecondColumn(sheetId) {
  Logger.log("parsing sheet!")
  const sheet = SpreadsheetApp.openById(sheetId).getActiveSheet();
  const range = sheet.getDataRange();
  const richData = range.getRichTextValues();

  let linksList = [];
  for (let i = 1; i < richData.length; i++) { // Skip header
    const richText = richData[i][1]; // 2nd column = index 1
    const url = richText.getLinkUrl(); // null if no link
    //csv += url ? `"${url}"\n` : '""\n'; // handle blank cells too
    if (url) {
      linksList.push(url); // Add the link to the list
    }
  }
  return linksList;
}

function getPlainTextFromSecondColumn(sheet) {
  const range = sheet.getRange(2, 2, sheet.getLastRow() - 1); // from row 2, col 2 (B), all rows except header
  const values = range.getValues(); // gets values as 2D array
  let plainTextList = [];
  for (let i = 0; i < values.length; i++) {
    plainTextList.push(values[i][0]); // Each row is an array with one value
  }
  //Logger.log(plainTextList);
  return plainTextList;
}

function iterateLinks(listOfLinks, outputSheet) {

  let index = 2;
  listOfLinks.forEach(function(link) {
    //Logger.log('Link: ' + link);
    Logger.log("Checking link: " + (index-1) + " of " + listOfLinks.length )
    const docId = extractDocIdFromUrl(link); // Extract the document ID from the URL
    //Logger.log('Processing Google Doc: ' + docId);
    if(docId != null) {
      let rowData = parseDocSections(docId);
      //Logger.log(rowData)
      writeSectionsToSheet(rowData, index, outputSheet)
    }
    index++;
  });
}

function writeSectionsToSheet(sections, rowIndex, sheet) {
  sections.forEach(function(item, index) {
    sheet.getRange(rowIndex, index + 1).setValue(item); // Column index starts from 1, so add 1 to `index`
  });
}

function parseDocSections(docId) {
  const doc = DocumentApp.openById(docId);  // Open the Google Doc using the DocumentApp API
  const body = doc.getBody();               // Get the body of the document
  const numElements = body.getNumChildren();
  //Logger.log("numElements: " + numElements)
  const paragraphs = body.getParagraphs();      // Iterate through all elements in the body

  let currentNormal = '';
  let textSections = [];

  textSections.push("todo route"); // todo empty first spot...

  for (var i = 0; i < paragraphs.length; i++) {
    var paragraph = paragraphs[i];
    let text = paragraph.getText().trim(); // Get the text content of the paragraph

    //Logger.log("Type: " + paragraph.getHeading())
    if (text === "") {
      //Logger.log("Type: " + paragraph.getHeading())
      //Logger.log("Skipping empty line... " );
      continue;
    } 

    // H1
    // N

    // H2 - x15
    // Normal

    // H2

    // H3 - x7  ???
    // N        ???

    // Example: Check if the paragraph is a heading (e.g., Heading 1)
    if (paragraph.getHeading() === DocumentApp.ParagraphHeading.HEADING1) {
      if(currentNormal != '') {
        textSections.push(currentNormal);
        currentNormal = '';
      }
      //Logger.log('Heading 1: ' + text);
      textSections.push(text);
    }

    if (paragraph.getHeading() === DocumentApp.ParagraphHeading.HEADING2) {
      if(currentNormal != '') {
        textSections.push(currentNormal);
        currentNormal = '';
      }
      //Logger.log('Heading 2: ' + text);
      textSections.push(text);
    }

    if (paragraph.getHeading() === DocumentApp.ParagraphHeading.HEADING3) {
      if(currentNormal != '') {
        textSections.push(currentNormal);
        currentNormal = '';
      }
      //Logger.log('Heading 2: ' + text);
      textSections.push(text);
    }

    // Example: Check if the paragraph is a regular paragraph
    if (paragraph.getHeading() === DocumentApp.ParagraphHeading.NORMAL) {
      //Logger.log('Normal Text: ' + text);
      if(!text.endsWith(".")) {
        text = text + ".";
      }
      text = text.slice(0, -1) + "$$$";  // Artificial newline
      currentNormal += text;
    }

  }

  // Cleanup Last content
  if(currentNormal != '') {
    textSections.push(currentNormal.trim());
  }

  //Logger.log("textSections: " + textSections)
  return textSections;
}

function extractDocIdFromUrl(url) {
  const match = url.match(/\/d\/([a-zA-Z0-9_-]+)/);
  return match ? match[1] : null;
}

function clearSheet(sheet) {

  sheet.clear();
   const headers = [
    "route", "headline", "intro_copy",
    //"question_1_nav",
    "section_1_h",
    "question_1",
    "section_2_h", 
    "question_2",
    "section_3_h", 
    "question_3",
    "section_4_h", 
    "question_4",
    "section_5_h", 
    "question_5",
    "section_6_h", 
    "question_6",
    "section_7_h",  
    "question_7",
    "section_8_h", 
    "question_8",
    "section_9_h",  
    "question_9",
    "section_10_h",  
    "question_10",
    "section_11_h", 
    "question_11", 
    "section_12_h", 
    "question_12", 
    "section_13_h", 
    "question_13",
    "section_14_h", 
    "question_14",
    "section_15_h", 
    "question_15",
    "aaq_nav",
    "additional_questions",
    "conclusion_nav",
    "conclusion",
    "seo_description"
  ];
  // Set the headers in the first row
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
}

function tagCellsUsingSwitch(sheet) {

  // Insert new col, for nav item
  //var columnToInsertBefore = 4; // This will insert a new column before column C
  //sheet.insertColumnBefore(columnToInsertBefore);

  const range = sheet.getDataRange();
  const values = range.getValues();     // 2D array of all data


  // Start from row 1 if row 0 is the header
  for (let row = 1; row < values.length; row++) {
    for (let col = 0; col < values[0].length; col++) {
      let cellValue = values[row][col];
      if (typeof cellValue !== 'string' || !cellValue.trim()) continue;

      let title;
      let result;
      

      // Handle question cols
      if (col == 1) {  // title
        //Logger.log("TODO Title: " + cellValue )
        values[row][col] = cellValue.replace("15 ", "");
      }
      // Questions start at 3, with first answer at 4!!!!
      else if (col % 2 === 0 && col >= 4 && col <= 32) {
          //Logger.log("ANSWER - " + col)
          //Logger.log("You entered an odd number between 5 and 32: " + value);
          cellValue = cellValue.replace("$$$", "");
          title = values[row][col-1];
          result = `<h2>${title}</h2>${cellValue}`;
          values[row][col] = result;
      } 
      // Handle Addt and Conclusion
      else if (col == 34 || col == 36) {
        
          Logger.log("LAST - " + col)
          Logger.log(col + " : " + cellValue)
          //Logger.log("You entered an odd number between 32 and 37: " + value);
          title = values[row][col-1];
          result = `<h2>${title}</h2><ul>`;
          let lines = cellValue.split("$$$"); // was '.'
          // The previous step - Doc parsing should add periods now...
          //Logger.log("lines: " + lines.length)
          for (let i = 0; i < lines.length; i++) {
            if(lines[i].length == 0) {
              continue;
            }
            line = lines[i];
            if(line.startsWith("Disclaimer")){
                //result += `${lines[i]}`;
                continue;
            } else {
                result += `<li>${lines[i]}</li>`;
            }
          }
          result += `</ul>`;
          values[row][col] = result;
      } else {
        values[row][col] = cellValue.replace("$$$", "");
      }
      

      // switch (col) {

      //   // No LIs in these cases
      //   case 0: // route
      //     break;
      //   case 1: // Title header
      //     Logger.log("1: " + cellValue)
      //   break;
      //   case 2: // Description
      //     Logger.log("2: " + cellValue)
      //   break;
      //   case 3:
      //     Logger.log("3: " + cellValue)
      //   break;
      //   case 4:
      //   case 6:
      //   case 8:
      //   case 10:
      //   case 12:
      //   case 14:
      //   case 16:
      //   case 18:
      //   case 20:
      //   case 22:
      //   case 24:
      //   case 26:
      //   case 28:
      //   case 30:
      //   case 32:
      //     // cellValue = cellValue.replace("$$$", "");
      //     // title = values[row][col-1];
      //     // result = `<h2>${title}</h2>${cellValue}`;
      //     // values[row][col] = result;
      //   break;
      //   case 34:  // additional
      //   case 36:  // conclusion
      //     //Logger.log(col + ": " + cellValue)
      //     // title = values[row][col-1];
      //     // result = `<h2>${title}</h2><ul>`;
      //     // let lines = cellValue.split("$$$"); // was '.'
      //     // // The previous step - Doc parsing should add periods now...
      //     // //Logger.log("lines: " + lines.length)
      //     // for (let i = 0; i < lines.length; i++) {
      //     //   if(lines[i].length == 0) {
      //     //     continue;
      //     //   }
      //     //   line = lines[i];
      //     //   if(line.startsWith("Disclaimer")){
      //     //       //result += `${lines[i]}`;
      //     //       continue;
      //     //   } else {
      //     //       result += `<li>${lines[i]}</li>`;
      //     //   }
            
      //     // }

      //     // result += `</ul>`;
      //     // values[row][col] = result;
      //   break;
      //   default:
      //     // values[row][col] = cellValue.replace("$$$", "");
      //   break;
      // }
    }
  }

  // Write back updated values
  range.setValues(values);
}

function cleanExtraColumns(sheet) {
  var columnsToDelete = [];
  for (var i = 4; i <= 32; i += 2) {
    columnsToDelete.push(i);
  }
  Logger.log("columnsToDelete: " + columnsToDelete)
  columnsToDelete.sort((a, b) => b - a).forEach(col => {
    sheet.deleteColumn(col);
  });
}

function insertAndPopulateExtraColumn(colIndex, header, content) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var columnToInsertBefore = colIndex;
  sheet.insertColumnBefore(columnToInsertBefore);
  
  // Get number of rows that have data in any column
  var lastRow = sheet.getLastRow();

  // Build values array to fill only populated rows
  var values = [];
  for (var i = 1; i <= lastRow; i++) {
    if(i == 1) {
        values.push([header]);
    } else {
        values.push([content]);
    }
  }
  
  // Populate 10 rows of the new column
  sheet.getRange(1, columnToInsertBefore, lastRow, 1).setValues(values);
}

function main() {
  let inputSheetId = '1KGdsH445R3UlnFs_ET2ZCrBheNbktjV5KR5XJBD6lzg';
  let outputSheetId = '1n0d_N9uW4VzD3BgzY02R2Q5AdizhKrWcMVL2nMgYVjg';


  let inputSheet = SpreadsheetApp.openById(inputSheetId).getActiveSheet();
  let outputSheet = SpreadsheetApp.openById(outputSheetId).getActiveSheet(); 
  //Logger.log("outputSheet: " + outputSheet)
  const links = getPlainTextFromSecondColumn(inputSheet);
  clearSheet(outputSheet);
  iterateLinks(links, outputSheet);
  tagCellsUsingSwitch(outputSheet);
  cleanExtraColumns(outputSheet);

  insertAndPopulateExtraColumn(4, "question_1_nav", "Interview Questions");
}
